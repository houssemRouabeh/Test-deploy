<%- include('partial/header') %>

<main>
  <div>
    <div>
      <h1>Catalogue des Arbres à Vendre</h1>
    </div>

    <div class="catalogue">
      <% trees.forEach(tree => { %>
      <div class="card">
        <img
          src="<%= tree.image || 'https://via.placeholder.com/300' %>"
          alt="<%= tree.name %>"
          class="card-img"
        />
        <div class="card-body">
          <h3 class="card-title"><%= tree.name %></h3>
          <p class="card-description"><%= tree.description %></p>
          <div class="card-footer">
            <span class="price">€<%= tree.price.toFixed(2) %></span>
            <button
              class="add-to-cart"
              data-tree-id="<%= tree.id %>"
              data-tree-name="<%= tree.name %>"
              data-tree-price="<%= tree.price %>"
            >
              Ajouter au Panier
            </button>
          </div>
        </div>
      </div>
      <% }); %>
    </div>
  </div>
</main>

<!-- Modal -->
<div id="campaignModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Choisissez une campagne pour <span id="modalTreeName"></span></h2>

    <!-- Zone de message -->
    <div id="messageContainer" class="message-container"></div>

    <div id="campaignsList"></div>
    <div class="quantity-selector">
      <label for="quantity">Quantité:</label>
      <input type="number" id="quantity" name="quantity" min="1" value="1" />
    </div>
    <button id="confirmReservation">Confirmer la réservation</button>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Éléments du DOM
    const modal = document.getElementById("campaignModal");
    const closeBtn = document.querySelector(".close");
    const addToCartButtons = document.querySelectorAll(".add-to-cart");
    const modalTreeName = document.getElementById("modalTreeName");
    const campaignsList = document.getElementById("campaignsList");
    const confirmBtn = document.getElementById("confirmReservation");
    const quantityInput = document.getElementById("quantity");
    const messageContainer = document.getElementById("messageContainer");

    // Variables d'état
    let currentTreeId;
    let currentTreeName;

    // Fonction pour afficher des messages
    function showMessage(type, text) {
      messageContainer.innerHTML = `
        <div class="message ${type}">
          ${text}
          <span class="close-message">&times;</span>
        </div>
      `;

      // Fermer le message au clic
      messageContainer
        .querySelector(".close-message")
        .addEventListener("click", () => {
          messageContainer.innerHTML = "";
        });

      // Disparaître après 5 secondes
      setTimeout(() => {
        messageContainer.innerHTML = "";
      }, 5000);
    }

    // Ouvrir modal quand on clique sur "Ajouter au panier"
    addToCartButtons.forEach((button) => {
      button.addEventListener("click", function () {
        currentTreeId = this.dataset.treeId;
        currentTreeName = this.dataset.treeName;

        // Préparer le modal
        modalTreeName.textContent = currentTreeName;
        campaignsList.innerHTML =
          '<p class="loading">Chargement des campagnes...</p>';
        confirmBtn.disabled = true;
        quantityInput.value = 1;
        messageContainer.innerHTML = "";

        // Afficher le modal
        modal.style.display = "block";

        // Charger les campagnes disponibles pour cet arbre
        loadCampaigns(currentTreeId);
      });
    });

    // Fonction pour charger les campagnes
    function loadCampaigns(treeId) {
      fetch(`/campaigns/${treeId}`)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`Erreur ${response.status}`);
          }
          return response.json();
        })
        .then((campaigns) => {
          displayCampaigns(campaigns);
        })
        .catch((error) => {
          console.error("Error:", error);
          showMessage(
            "error",
            `Erreur lors du chargement des campagnes: ${error.message}`
          );
        });
    }

    // Fonction pour afficher les campagnes
    function displayCampaigns(campaigns) {
      campaignsList.innerHTML = "";

      if (!campaigns || campaigns.length === 0) {
        campaignsList.innerHTML =
          "<p>Aucune campagne disponible pour cet arbre.</p>";
        return;
      }

      // Créer un formulaire pour les boutons radio
      const form = document.createElement("form");

      campaigns.forEach((campaign) => {
        const div = document.createElement("div");
        div.className = "campaign-item";

        div.innerHTML = `
          <input 
            type="radio" 
            id="campaign-${campaign.id}" 
            name="selectedCampaign" 
            value="${campaign.id}"
            required
          >
          <label for="campaign-${campaign.id}">
            <strong>${campaign.name}</strong>
            <p>${campaign.description || "Pas de description"}</p>
            <small>${campaign.trees?.length || 0} arbres disponibles</small>
          </label>
        `;

        form.appendChild(div);
      });

      campaignsList.appendChild(form);
      confirmBtn.disabled = false;
    }

    // Fermer modal
    closeBtn.addEventListener("click", function () {
      modal.style.display = "none";
    });

    window.addEventListener("click", function (event) {
      if (event.target === modal) {
        modal.style.display = "none";
      }
    });

    // Confirmer la réservation
    // Confirmer la réservation
    confirmBtn.addEventListener("click", function () {
      const selectedCampaign = document.querySelector(
        'input[name="selectedCampaign"]:checked'
      );
      const quantity = parseInt(quantityInput.value);

      if (!selectedCampaign) {
        showMessage("error", "Veuillez sélectionner une campagne");
        return;
      }

      if (!quantity || quantity < 1) {
        showMessage("error", "Veuillez entrer une quantité valide (minimum 1)");
        return;
      }

      // Récupérer les réservations existantes
      let reservations =
        JSON.parse(localStorage.getItem("treeReservations")) || [];

      // Ajouter la nouvelle réservation
      const newReservation = {
        treeId: currentTreeId,
        treeName: currentTreeName,
        campaignId: selectedCampaign.value,
        campaignName: document.querySelector(
          `label[for="campaign-${selectedCampaign.value}"] strong`
        ).textContent,
        quantity: quantity,
        price: parseFloat(
          document.querySelector(
            `.add-to-cart[data-tree-id="${currentTreeId}"]`
          ).dataset.treePrice
        ),
        date: new Date().toISOString(),
      };

      reservations.push(newReservation);

      // Sauvegarder dans localStorage
      localStorage.setItem("treeReservations", JSON.stringify(reservations));

      showMessage(
        "success",
        `${quantity} ${currentTreeName} ajouté(s) au panier`
      );

      // Fermer le modal après un délai
      setTimeout(() => {
        modal.style.display = "none";
      }, 1500);
    });
  });
</script>

<style>
  /* Styles pour le modal */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 600px;
  }

  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }

  .close:hover {
    color: black;
  }

  /* Styles pour les campagnes */
  .campaign-item {
    display: flex;
    align-items: flex-start;
    gap: 10px;
    padding: 12px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
  }

  .campaign-item:hover {
    background-color: #f5f5f5;
  }

  .campaign-item input[type="radio"] {
    margin-top: 5px;
  }

  .campaign-item label {
    flex-grow: 1;
    cursor: pointer;
  }

  .campaign-item label strong {
    display: block;
    margin-bottom: 5px;
    color: #333;
  }

  .campaign-item label p {
    margin: 5px 0;
    color: #666;
    font-size: 0.9em;
  }

  .campaign-item label small {
    color: #28a745;
    font-size: 0.8em;
  }

  .loading,
  .error {
    text-align: center;
    padding: 20px;
  }

  .error {
    color: #d32f2f;
  }

  .error button {
    margin-top: 10px;
    padding: 5px 10px;
    background-color: #f5f5f5;
    border: 1px solid #ccc;
    border-radius: 3px;
    cursor: pointer;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .modal-content {
      width: 95%;
      margin: 10% auto;
    }
  }
  /* Styles pour les messages */
  .message-container {
    margin: 10px 0;
    min-height: 40px;
  }

  .message {
    padding: 12px 20px;
    border-radius: 4px;
    margin-bottom: 10px;
    position: relative;
    animation: slideDown 0.3s ease-out;
  }

  .message.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .message.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .close-message {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    font-size: 1.2em;
  }

  /* Spinner pour le bouton */
  .spinner {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top-color: #fff;
    animation: spin 1s ease-in-out infinite;
    margin-right: 8px;
    vertical-align: middle;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes slideDown {
    from {
      transform: translateY(-10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>
<%- include('partial/footer') %>
